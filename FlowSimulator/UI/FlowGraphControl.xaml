<UserControl x:Class="FlowSimulator.UI.FlowGraphControl"
			xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			xmlns:FlowGraphUI="clr-namespace:FlowGraphUI;assembly=FlowGraphUI"
			xmlns:NetworkUI="clr-namespace:NetworkUI;assembly=NetworkUI"
			xmlns:NetworkModel="clr-namespace:NetworkModel;assembly=NetworkModel"
			xmlns:ZoomAndPan="clr-namespace:ZoomAndPan;assembly=ZoomAndPan"
            xmlns:scroll="clr-namespace:MouseDragScrollViewer;assembly=MouseDragScrollViewer"
			xmlns:ac="clr-namespace:AdornedControl;assembly=AdornedControl"
            xmlns:local="clr-namespace:FlowSimulator.UI"
            xmlns:sys="clr-namespace:System;assembly=mscorlib"
            xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"

			xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
			xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			xmlns:nodes="clr-namespace:FlowGraph.Nodes;assembly=FlowGraph"
			mc:Ignorable="d" 
			d:DesignHeight="153" d:DesignWidth="603">

    <UserControl.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="SharedVisualTemplates.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!-- UI commands. -->

            <RoutedUICommand x:Key="Commands.DeleteSelectedNodes" />
            <RoutedUICommand x:Key="Commands.DeleteNode" />
            <RoutedUICommand x:Key="Commands.DeleteConnection" />
            <RoutedUICommand x:Key="Commands.ZoomOut" />
            <RoutedUICommand x:Key="Commands.ZoomIn" />
            <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom" />
            <RoutedUICommand x:Key="Commands.FitContent" />
            <RoutedUICommand x:Key="Commands.Fill" />
            <RoutedUICommand x:Key="Commands.OneHundredPercent" />

            <!-- flow graph edition -->
            <RoutedUICommand x:Key="Commands.FlowGraph.Copy" />
            <RoutedUICommand x:Key="Commands.FlowGraph.Paste" />

            <RoutedUICommand x:Key="Commands.FlowGraph.Undo" />
            <RoutedUICommand x:Key="Commands.FlowGraph.Redo" />
            <!-- flow graph processing -->
            <RoutedUICommand x:Key="Commands.FlowGraph.Launch" />
            <!-- flow graph debugging -->
            <RoutedUICommand x:Key="Commands.FlowGraph.Resume" />
            <RoutedUICommand x:Key="Commands.FlowGraph.NextStep" />
            <RoutedUICommand x:Key="Commands.FlowGraph.Pause" />
            <RoutedUICommand x:Key="Commands.FlowGraph.Stop" />

            <!-- 
            This converts from a scale value to a percentage value.
            It is used to convert the value of 'ContentScale' to the percentage zoom level that is displayed in the UI.
            -->
            <FlowGraphUI:ScaleToPercentConverter x:Key="scaleToPercentConverter" />

            <!-- This converts the type of a variable to a color value. -->
            <local:TypeToColorConverter x:Key="typeToColorConverter" />
            <local:TypeToLinearGradientConverter x:Key="typeToLinearGradientConverter" />

            <!-- 
            This graphic is used to indicate that a connection cannot be made between two particular connectors.        
            -->
            <DataTemplate DataType="{x:Type FlowGraphUI:ConnectionBadIndicator}">
                <Border BorderBrush="Gray" Background="Black" BorderThickness="1" Padding="5,2,5,2">
                    <Grid >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Image Grid.Column="0" Width="16" Height="16"
							Source="..\Resources/block_16.png"
							HorizontalAlignment="Right"/>

                        <TextBlock Grid.Column="1" Text="{Binding Message}" TextAlignment="Left" Foreground="Red"/>
                    </Grid>
                </Border>
            </DataTemplate>

            <!-- 
            This graphic is used to indicate that a connection can be made between two particular connectors.        
            -->
            <DataTemplate DataType="{x:Type FlowGraphUI:ConnectionOkIndicator}">
                <Grid >
                    <Image 
                        Width="16"
                        Height="16"
                        Source="..\Resources/tick_16.png"
                        HorizontalAlignment="Right"
                        />
                </Grid>
            </DataTemplate>

            <!-- 
            Define the visual style for a 'ConnectorItem'.
            -->
            <Style  TargetType="{x:Type NetworkUI:ConnectorItem}" >
                <!-- 
                Data-binding for the connector hotspot.
                ConnectorItem automatically computes its center points and assings this value
                to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application
                view-model.
                -->
                <Setter Property="Hotspot" Value="{Binding Hotspot, Mode=OneWayToSource}" />

                <!-- The visual template. -->
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Type}" Value="Input">
                        <Setter Property="Template" >
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type NetworkUI:ConnectorItem}" >
                                    <Path Stretch="None"
                                            Data="M 0,0 L4,0 L 8,4.5 L 4,9 L 0,9 Z"
                                            Stroke="{StaticResource connectionBrush}"
                                            Margin="1" Cursor="Hand"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center" >

                                        <Path.Style>
                                            <Style TargetType="{x:Type Path}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsConnectionAttached}" Value="True">
                                                        <Setter Property="Fill" Value="{StaticResource connectionBrush}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsConnectionAttached}" Value="False">
                                                        <Setter Property="Fill" Value="Transparent" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Path.Style>

                                    </Path>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="Output">
                        <Setter Property="Template" >
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type NetworkUI:ConnectorItem}" >
                                    <Path Stretch="None"
                                            Data="M 0,0 L4,0 L 8,4 L 4,9 L 0,9 Z"
                                            Stroke="{StaticResource connectionBrush}"
                                            Margin="1" Cursor="Hand"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center" >

                                        <Path.Style>
                                            <Style TargetType="{x:Type Path}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsConnectionAttached}" Value="True">
                                                        <Setter Property="Fill" Value="{StaticResource connectionBrush}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsConnectionAttached}" Value="False">
                                                        <Setter Property="Fill" Value="Transparent" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Path.Style>

                                    </Path>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="VariableInput">
                        <Setter Property="Template" >
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type NetworkUI:ConnectorItem}" >
                                    <!-- The visual for the connector. -->
                                    <Ellipse Width="10" Height="10"
                                        Stroke="{Binding SourceSlot.VariableType, Converter={StaticResource typeToColorConverter}}" >

                                        <Ellipse.Style>
                                            <Style TargetType="{x:Type Ellipse}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsConnectionAttached}" Value="True">
                                                        <Setter Property="Fill" Value="{Binding SourceSlot.VariableType, Converter={StaticResource typeToColorConverter}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsConnectionAttached}" Value="False">
                                                        <Setter Property="Fill" Value="Transparent" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Ellipse.Style>

                                    </Ellipse>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="VariableOutput">
                        <Setter Property="Template" >
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type NetworkUI:ConnectorItem}" >
                                    <!-- The visual for the connector. -->
                                    <Ellipse Width="10" Height="10"
                                        Stroke="{Binding SourceSlot.VariableType, Converter={StaticResource typeToColorConverter}}" >

                                        <Ellipse.Style>
                                            <Style TargetType="{x:Type Ellipse}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsConnectionAttached}" Value="True">
                                                        <Setter Property="Fill" Value="{Binding SourceSlot.VariableType, Converter={StaticResource typeToColorConverter}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsConnectionAttached}" Value="False">
                                                        <Setter Property="Fill" Value="Transparent" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Ellipse.Style>

                                    </Ellipse>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="VariableInputOutput">
                        <Setter Property="Template" >
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type NetworkUI:ConnectorItem}" >
                                    <!-- The visual for the connector. -->
                                    <Ellipse Width="10" Height="10"
                                        Stroke="{Binding SourceSlot.VariableType, Converter={StaticResource typeToColorConverter}}" >

                                        <Ellipse.Style>
                                            <Style TargetType="{x:Type Ellipse}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsConnectionAttached}" Value="True">
                                                        <Setter Property="Fill" Value="{Binding SourceSlot.VariableType, Converter={StaticResource typeToColorConverter}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsConnectionAttached}" Value="False">
                                                        <Setter Property="Fill" Value="Transparent" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Ellipse.Style>

                                    </Ellipse>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>

                </Style.Triggers>

            </Style>

            <!-- 
            Template for the button that is used to delete nodes and connections in the graph.
            This button is displayed in an adorner when the user hovers the mouse over a node or connection.
            -->
            <ControlTemplate 
                x:Key="deleteButtonTemplate"
                TargetType="{x:Type Button}"
                >
                <Grid
                    x:Name="grid"
                    >
                    <Grid.RenderTransform>
                        <ScaleTransform
                            ScaleX="1"
                            ScaleY="1"
                            CenterX="10"
                            CenterY="10"
                            />
                    </Grid.RenderTransform>
                    <Ellipse
                        x:Name="ellipse"
                        Stroke="Black"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch"
                        Fill="White"
                        />
                    <Image
                        Source="..\Resources\scissors.png" 
                        Margin="2"
                        />
                </Grid>
                <ControlTemplate.Triggers>
                    <EventTrigger
                        RoutedEvent="Mouse.MouseEnter"
                        >
                        <!-- 
                        Make the 'delete connection button' larger when the mouse 
                        cursor is hovered over it.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1.3"
                                    Duration="0:0:0.25"
                                    />
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1.3"
                                    Duration="0:0:0.25"
                                    />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>

                    <EventTrigger
                        RoutedEvent="Mouse.MouseLeave"
                        >
                        <!-- 
                        Return the 'delete connection button' to normal size when the mouse
                        cursor is moved away.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1"
                                    Duration="0:0:0.05"
                                    />
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1"
                                    Duration="0:0:0.05"
                                    />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ControlTemplate.Triggers>

            </ControlTemplate>

            <!-- 
            Data-template for ConectionViewModel.
            
            Note that the 'Start' and 'End' of the arrow are bound to 'SourceConnectorHotspot' and 'DestConnectorHotspot' in 
            the view-model.

            In this sample a curved arrow represents connections between nodes.
            -->
            <DataTemplate
                DataType="{x:Type NetworkModel:ConnectionViewModel}"
                >

                <!-- 
                An adorned control is used, to represent the connection. 
                When the user hovers the mouse cursor over the connection, the 
                'delete connection' adorner pops up and allows them to delete the connection.
                -->
                <ac:AdornedControl
                    HorizontalAdornerPlacement="Mouse"
                    VerticalAdornerPlacement="Mouse"
                    IsMouseOverShowEnabled="{Binding ElementName=networkControl, Path=IsNotDragging}"
                    >

                    <!-- The connection is represented by a curved arrow. -->
                    <FlowGraphUI:CurvedArrow Name="curveArrow"
                        Stroke="{Binding ConnectedConnector.SourceSlot.VariableType, Converter={StaticResource typeToColorConverter}}"
                        Fill="{Binding ConnectedConnector.SourceSlot.VariableType, Converter={StaticResource typeToColorConverter}}"
                        Points="{Binding Points}" >

                        <FlowGraphUI:CurvedArrow.Resources>
                            <Storyboard x:Key="curveArrowStoryboard" >
                                <DoubleAnimation Storyboard.TargetProperty="StrokeDashOffset" Timeline.DesiredFrameRate="30"
                                                       From="0.0" To="-200.0" Duration="0:0:3" BeginTime="0:0:0" />

                                <DoubleAnimation Storyboard.TargetProperty="StrokeThickness" Timeline.DesiredFrameRate="30"
                                                       From="8.0" To="2.0" Duration="0:0:3" BeginTime="0:0:0"/>
                            </Storyboard>
                        </FlowGraphUI:CurvedArrow.Resources>

                        <FlowGraphUI:CurvedArrow.Style>
                            <Style TargetType="{x:Type FlowGraphUI:CurvedArrow}">
                                <Setter Property="StrokeThickness" Value="2" />
                                <Setter Property="StrokeDashOffset" Value="0.0" />
                                <Setter Property="StrokeDashArray" Value="" />

                                <Setter Property="Fill" Value="White" />

                                <Style.Triggers>
                                    <EventTrigger RoutedEvent="Activated" >
                                        <EventTrigger.Actions>
                                            <BeginStoryboard Storyboard="{StaticResource curveArrowStoryboard}" />
                                        </EventTrigger.Actions>
                                    </EventTrigger>
                                </Style.Triggers>

                            </Style>
                        </FlowGraphUI:CurvedArrow.Style>

                    </FlowGraphUI:CurvedArrow>

                    <ac:AdornedControl.AdornerContent>

                        <!-- 
                        This is the adorner that pops up when the user hovers the mouse over the connection.
                        It displays a button that the user can click to delete the connection.
                        -->
                        <Canvas
                            x:Name="connectionAdornerCanvas"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Width="30"
                            Height="30"
                            >
                            <Line
                                X1="0"
                                Y1="30"
                                X2="15"
                                Y2="15"
                                Stroke="Black"
                                StrokeThickness="1"
                                />
                            <Button
                                x:Name="deleteConnectionButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Cursor="Hand"
                                Focusable="False"
                                Command="{StaticResource Commands.DeleteConnection}"
                                CommandParameter="{Binding}"
                                Template="{StaticResource deleteButtonTemplate}"
                                />
                        </Canvas>
                    </ac:AdornedControl.AdornerContent>

                </ac:AdornedControl>
            </DataTemplate>

            <!-- Define a data-template for the 'NodeViewModel' class. -->
            <DataTemplate DataType="{x:Type NetworkModel:NodeViewModel}" >

                <!-- 
                An adorned control is used, to represent the node. 
                When the user hovers the mouse cursor over the node, the comments adorner pops up.
                -->
                <ac:AdornedControl
                    HorizontalAdornerPlacement="Outside"
                    VerticalAdornerPlacement="Outside"
                    AdornerOffsetX="0"
                    AdornerOffsetY="-10"
                    IsMouseOverShowEnabled="True"
                    IsEnabled="True"
                    FadeInTime="0.0"
                    FadeOutTime="0.0"
                    CloseAdornerTimeOut="2.0" >

                    <ac:AdornedControl.Style>
                        <Style TargetType="{x:Type ac:AdornedControl}">
                            <Setter Property="IsAdornerVisible" Value="True" />

                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Comment}" Value="{x:Null}">
                                    <Setter Property="IsAdornerVisible" Value="False" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Comment}" Value="{x:Static sys:String.Empty}">
                                    <Setter Property="IsAdornerVisible" Value="False" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ac:AdornedControl.Style>

                    <ac:AdornedControl.AdornerContent>

                        <!-- 
                            This is the adorner that pops up when the user hovers the mouse over the node.
                            It displays the comments of the node.
                            -->
                        <Grid x:Name="nodeCommentAdornerGrid"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Top" 
                            Background="Gray">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <xctk:WatermarkTextBox x:Name="commentTextBlock" Grid.Column="0"
                                Text="{Binding Comment, Mode=TwoWay}" Watermark="No comment" >

                                <xctk:WatermarkTextBox.WatermarkTemplate>
                                    <DataTemplate>
                                        <ContentControl Content="{Binding}" 
                                            Foreground="Gray" FontStyle="Italic" Focusable="False" />
                                    </DataTemplate>
                                </xctk:WatermarkTextBox.WatermarkTemplate>

                            </xctk:WatermarkTextBox>

                            <Image Grid.Column="1" Stretch="None" 
                               Source="/FlowSimulator;component/Resources/lock-16.png" 
                               HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Grid>
                    </ac:AdornedControl.AdornerContent>

                    <!-- 
                    An adorned control is used, to represent the node. 
                    When the user hovers the mouse cursor over the node, the comments adorner pops up.
                    -->
                    <ac:AdornedControl
                            HorizontalAdornerPlacement="Outside"
                            VerticalAdornerPlacement="Outside"
                            AdornerOffsetX="0"
                            AdornerOffsetY="-10"
                            IsMouseOverShowEnabled="True"
                            IsAlwaysVisible="True"
                            IsEnabled="True"
                            FadeInTime="0.0"
                            FadeOutTime="0.0"
                            CloseAdornerTimeOut="2.0" >

                        <ac:AdornedControl.AdornerContent>

                            <!-- 
                            It displays the custom message of the node.
                            -->
                            <Grid x:Name="nodeCustomTextAdornerGrid"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Top">

                                <Grid.Style>
                                    <Style TargetType="{x:Type Grid}">
                                        <Setter Property="Visibility" Value="Visible" />

                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding CustomText}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding CustomText}" Value="{x:Static sys:String.Empty}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>

                                <StackPanel Orientation="Vertical">
                                    <Border Background="DarkOrange" CornerRadius="4"
                                            BorderBrush="Orange" BorderThickness="1" >
                                        <Label Padding="5" Foreground="White" Content="{Binding CustomText, Mode=OneWay}" />
                                    </Border>

                                    <Canvas>
                                        <Path Stretch="None" Margin="1" Canvas.Left="25"
                                            Data="M 0,0 L 5,14 L 10,0 Z" StrokeThickness="1"
                                            Fill="DarkOrange" Stroke="Orange"
                                            VerticalAlignment="Center" HorizontalAlignment="Center" />
                                    </Canvas>
                                </StackPanel>
                            </Grid>

                        </ac:AdornedControl.AdornerContent>

                        <!-- The margin has been selected so that the selection rect nicely covers the entire node. -->
                        <Grid
                            MinWidth="120"
                            Margin="0"
                            SizeChanged="Node_SizeChanged"
                            >

                            <!-- This rectangle is the main visual for the node. -->

                            <Rectangle
                                    RadiusX="4"
                                    RadiusY="4" >
                                <Rectangle.Style>
                                    <Style TargetType="Rectangle">
                                        <Setter Property="Fill" Value="{StaticResource nodeFillBrush}" />
                                        <Setter Property="Stroke" Value="{StaticResource nodeBorderBrush}" />
                                        <Setter Property="StrokeThickness" Value="1.3" />

                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SeqNode.NodeType}" Value="Variable" >
                                                <Setter Property="Fill" Value="{Binding SeqNode.VariableSlot.VariableType, Converter={StaticResource typeToLinearGradientConverter}}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding SeqNode.IsProcessing}" Value="True" >
                                                <Setter Property="Stroke" Value="{StaticResource nodeProcesingBorder}" />
                                                <Setter Property="StrokeThickness" Value="3" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Rectangle.Style>
                            </Rectangle>

                            <!-- 
                                This grid contains the node's connectors.
                                The margin is negative so that the connectors overlap the body of the node and it's selection border.
                            -->
                            <ContentControl Content="{TemplateBinding DataContext}">
                                <ContentControl.Style>
                                    <Style TargetType="{x:Type ContentControl}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SequenceNodeType}" Value="{x:Static nodes:NodeType.Action}" >
                                                <Setter Property="ContentTemplate" Value="{StaticResource actionNodeTemplate}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding SequenceNodeType}" Value="{x:Static nodes:NodeType.Event}" >
                                                <Setter Property="ContentTemplate" Value="{StaticResource actionNodeTemplate}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding SequenceNodeType}" Value="{x:Static nodes:NodeType.Variable}" >
                                                <Setter Property="ContentTemplate" Value="{StaticResource variableNodeTemplate}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentControl.Style>
                            </ContentControl>

                        </Grid>

                    </ac:AdornedControl>

                </ac:AdornedControl>
            </DataTemplate>

        </ResourceDictionary>

    </UserControl.Resources>

    <UserControl.InputBindings>

        <KeyBinding Gesture="Ctrl+C" Command="{StaticResource Commands.FlowGraph.Copy}"/>
        <KeyBinding Gesture="Ctrl+V" Command="{StaticResource Commands.FlowGraph.Paste}"/>

        <KeyBinding Gesture="Ctrl+Z" Command="{StaticResource Commands.FlowGraph.Undo}"/>
        <KeyBinding Gesture="Ctrl+Y" Command="{StaticResource Commands.FlowGraph.Redo}"/>

        <KeyBinding Key="F5" Command="{StaticResource Commands.FlowGraph.Launch}"/>
        <KeyBinding Gesture="Ctrl+F5" Command="{StaticResource Commands.FlowGraph.Stop}"/>

        <KeyBinding Key="Del" Command="{StaticResource Commands.DeleteSelectedNodes}"/>
        <KeyBinding Key="Minus" Command="{StaticResource Commands.ZoomOut}"/>
        <KeyBinding Key="Plus" Command="{StaticResource Commands.ZoomIn}"/>
        <KeyBinding Key="Backspace" Command="{StaticResource Commands.JumpBackToPrevZoom}"/>
        <KeyBinding Key="Space" Command="{StaticResource Commands.FitContent}"/>

    </UserControl.InputBindings>

    <UserControl.CommandBindings>

        <!-- Bind commands to event handlers.-->

        <CommandBinding 
            Command="{StaticResource Commands.DeleteSelectedNodes}" 
            Executed="DeleteSelectedNodes_Executed" 
            />

        <CommandBinding 
            Command="{StaticResource Commands.DeleteNode}" 
            Executed="DeleteNode_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteConnection}" 
            Executed="DeleteConnection_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomOut}" 
            Executed="ZoomOut_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomIn}" 
            Executed="ZoomIn_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.JumpBackToPrevZoom}" 
            Executed="JumpBackToPrevZoo_Executed" 
            CanExecute="JumpBackToPrevZoo_CanExecuted"
            />
        <CommandBinding 
            Command="{StaticResource Commands.FitContent}" 
            Executed="FitContent_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.Fill}" 
            Executed="Fill_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.OneHundredPercent}" 
            Executed="OneHundredPercent_Executed" 
            />

        <CommandBinding  Command="{StaticResource Commands.EditCustomVariable}" Executed="EditCustomVariable_Executed" />

        <!-- flow graph debugging -->
        <CommandBinding Command="{StaticResource Commands.FlowGraph.Copy}" Executed="FlowGraphCopy_Executed" />
        <CommandBinding Command="{StaticResource Commands.FlowGraph.Paste}" Executed="FlowGraphPaste_Executed" />

        <CommandBinding Command="{StaticResource Commands.FlowGraph.Undo}" Executed="FlowGraphUndo_Executed" />
        <CommandBinding Command="{StaticResource Commands.FlowGraph.Redo}" Executed="FlowGraphRedo_Executed" />
    </UserControl.CommandBindings>

    <UserControl.ContextMenu>

        <ContextMenu>

            <!-- Clicking this menu item creates a new node. -->

            <MenuItem x:Name="menuItemCreateNode" Header="Create Node" />

            <Separator />

            <MenuItem
                Header="Copy"
                Command="{StaticResource Commands.FlowGraph.Copy}"
                ToolTip="Copy selected nodes"
                />
            <MenuItem
                Header="Paste"
                Command="{StaticResource Commands.FlowGraph.Paste}"
                ToolTip="Paste copied nodes"
                />

            <Separator />

            <MenuItem
                Header="Fit"
                Command="{StaticResource Commands.FitContent}"
                ToolTip="Fit selected nodes to the viewport, when nothing is selected fits all nodes to the viewport"
                />
            <MenuItem
                Header="Fill"
                Command="{StaticResource Commands.Fill}"
                ToolTip="Fit the entire content area to the viewport"
                />
            <MenuItem
                Header="100%"
                Command="{StaticResource Commands.OneHundredPercent}"
                ToolTip="Scale the content to 100%"
                />
            <MenuItem
                Header="Previous Zoom"
                Command="{StaticResource Commands.JumpBackToPrevZoom}"
                ToolTip="Return to the previous zoom level"
                />

            <Separator />

            <MenuItem
                Header="Zoom Out"
                Command="{StaticResource Commands.ZoomOut}"
                ToolTip="Zooms out from the canvas"
                />
            <MenuItem
                    Header="Zoom In"
                    Command="{StaticResource Commands.ZoomOut}"
                    ToolTip="Zooms in on the canvas"
                    />

        </ContextMenu>
    </UserControl.ContextMenu>

    <DockPanel>

        <ToolBarTray DockPanel.Dock="Top">
            <ToolBar>
                <Button Command="{StaticResource Commands.FlowGraph.Undo}" ToolTip="Undo the last action" >

                    <Image x:Name="imgUndo" Width="16" Height="16"
                           Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center" >
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding UndoRedoManager.CanUndo}" Value="False" >
                                        <Setter Property="Source" Value="/Resources/Undo-gray-icon-16x16.png" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding UndoRedoManager.CanUndo}" Value="True" >
                                        <Setter Property="Source" Value="/Resources/Undo-icon-16x16.png" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>

                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding UndoRedoManager.CanUndo}" Value="False" >
                                    <Setter Property="IsEnabled" Value="False" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding UndoRedoManager.CanUndo}" Value="True" >
                                    <Setter Property="IsEnabled" Value="True" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>

                <Button Command="{StaticResource Commands.FlowGraph.Redo}" ToolTip="Redo the last action" >

                    <Image x:Name="imgRedo" Width="16" Height="16"
                           Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center" >
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding UndoRedoManager.CanRedo}" Value="False" >
                                        <Setter Property="Source" Value="/FlowSimulator;component/Resources/Redo-gray-icon-16x16.png" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding UndoRedoManager.CanRedo}" Value="True" >
                                        <Setter Property="Source" Value="/FlowSimulator;component/Resources/Redo-icon-16x16.png" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>

                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding UndoRedoManager.CanRedo}" Value="False" >
                                    <Setter Property="IsEnabled" Value="False" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding UndoRedoManager.CanRedo}" Value="True" >
                                    <Setter Property="IsEnabled" Value="True" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>

                <Separator />

                <Button Command="{StaticResource Commands.FlowGraph.Copy}" ToolTip="Copy" >
                    <Image x:Name="imgCopy" Width="16" Height="16" Source="/Resources/Copy-icon.png"
                           Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center"  />
                </Button>

                <Button Command="{StaticResource Commands.FlowGraph.Paste}" ToolTip="Paste" >
                    <Image x:Name="imgPaste" Width="16" Height="16" Source="/Resources/edit-paste-icon.png"
                           Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center"  />
                </Button>

            </ToolBar>
        </ToolBarTray>

        <!-- 
        The ScrollViewer displays scrollbars when the content is too big to fit in the viewport. 
        Focusable is set to False because it is only that NetworkView that I want to be focusable.
        -->
        <scroll:MouseDragScrollViewer x:Name="scrollViewer"
            CanContentScroll="True"
            VerticalScrollBarVisibility="Hidden"
            HorizontalScrollBarVisibility="Hidden"
            Focusable="False"
            DragAcceleration="0.005"
            DragHorizontalDelegate="MouseDragScrollViewerDragHorizontal"
            DragVerticalDelegate="MouseDragScrollViewerDragVertical"
            >

            <!-- 
            The ZoomAndPanControl displays the NetworkView as its content.
            We can use the mouse to zoom and pan about the NetworkView.
            -->
            <ZoomAndPan:ZoomAndPanControl
                x:Name="zoomAndPanControl"
                ContentScale="{Binding ContentScale, Mode=TwoWay}"
                ContentOffsetX="{Binding ContentOffsetX, Mode=TwoWay}"
                ContentOffsetY="{Binding ContentOffsetY, Mode=TwoWay}"
                ContentViewportWidth="{Binding ContentViewportWidth, Mode=OneWayToSource}"
                ContentViewportHeight="{Binding ContentViewportHeight, Mode=OneWayToSource}"
                MaxContentScale="1.0"
                MinContentScale="0.1"
                Background="#FF2A2A2C"
                Focusable="False"
                >

                <!--
                We need to nest our NetworkView in an AdornerDecorator so that adorners work correct when
                we zoom in and out using the ZoomAndPanControl
                -->
                <AdornerDecorator>
                    <!--
                    This grid specifies the size of the ZoomAndPanControl's content.
                    It wraps up both the NetworkView and drag-zooming Canvas.
                    -->
                    <Grid Width="{Binding ContentWidth}" Height="{Binding ContentHeight}" >

                        <!-- In this sample the NetworkView is the content displayed by the ZoomAndPanControl. -->

                        <NetworkUI:NetworkView x:Name="networkControl"
                            
                            SelectionChanged="networkControl_SelectionChanged"
                                               
                            NodesSource="{Binding Network.Nodes}"
                            ConnectionsSource="{Binding Path=Network.Connections}"
                            
                            ConnectionDragStarted="networkControl_ConnectionDragStarted"
                            QueryConnectionFeedback="networkControl_QueryConnectionFeedback"
                            ConnectionDragging="networkControl_ConnectionDragging"                            
                            ConnectionDragCompleted="networkControl_ConnectionDragCompleted"
                            
                            MouseDown="networkControl_MouseDown"
                            MouseUp="networkControl_MouseUp"
                            MouseMove="networkControl_MouseMove"
                            MouseWheel="networkControl_MouseWheel" 
                                               
                            NodeDragStarted="networkControl_NodeDragStarted"
                            NodeDragCompleted="networkControl_NodeDragCompleted"
                                               
                            AllowDrop="True"
                            Drop="DropList_Drop" 
                            DragEnter="DropList_DragEnter"  >

                            <NetworkUI:NetworkView.Background>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Grid>
                                            <Rectangle Width="10000" Height="10000">
                                                <Rectangle.Fill>
                                                    <DrawingBrush Stretch="None" TileMode="Tile" Viewport="0,0 15,15" ViewportUnits="Absolute">
                                                        <DrawingBrush.Drawing>
                                                            <GeometryDrawing>
                                                                <GeometryDrawing.Geometry>
                                                                    <GeometryGroup>
                                                                        <LineGeometry StartPoint="0,0" EndPoint="0,15"/>
                                                                        <LineGeometry StartPoint="0,0" EndPoint="15,0"/>
                                                                    </GeometryGroup>
                                                                </GeometryDrawing.Geometry>
                                                                <GeometryDrawing.Pen>
                                                                    <Pen Thickness="1" Brush="#FF555555"/>
                                                                </GeometryDrawing.Pen>
                                                            </GeometryDrawing>
                                                        </DrawingBrush.Drawing>
                                                    </DrawingBrush>
                                                </Rectangle.Fill>
                                            </Rectangle>
                                            <Rectangle Width="10000" Height="10000">
                                                <Rectangle.Fill>
                                                    <DrawingBrush Stretch="None" TileMode="Tile" Viewport="0,0 150,150" ViewportUnits="Absolute">
                                                        <DrawingBrush.Drawing>
                                                            <GeometryDrawing>
                                                                <GeometryDrawing.Geometry>
                                                                    <GeometryGroup>
                                                                        <LineGeometry StartPoint="0,0" EndPoint="0,150"/>
                                                                        <LineGeometry StartPoint="0,0" EndPoint="150,0"/>
                                                                    </GeometryGroup>
                                                                </GeometryDrawing.Geometry>
                                                                <GeometryDrawing.Pen>
                                                                    <Pen Thickness="1" Brush="Black"/>
                                                                </GeometryDrawing.Pen>
                                                            </GeometryDrawing>
                                                        </DrawingBrush.Drawing>
                                                    </DrawingBrush>
                                                </Rectangle.Fill>
                                            </Rectangle>
                                        </Grid>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </NetworkUI:NetworkView.Background>

                        </NetworkUI:NetworkView>


                        <!--
                        This Canvas and Border are used as a very simple way to render a drag rectangle that the user
                        uses to specify an area to zoom in on.
                        -->
                        <Canvas
                            x:Name="dragZoomCanvas"
                            Visibility="Collapsed"
                            >
                            <Border 
                                x:Name="dragZoomBorder"
                                BorderBrush="Black"
                                BorderThickness="1"
                                Background="Silver"
                                CornerRadius="1"
                                Opacity="0"
                                />
                        </Canvas>
                    </Grid>
                </AdornerDecorator>
            </ZoomAndPan:ZoomAndPanControl>
        </scroll:MouseDragScrollViewer>
    </DockPanel>
</UserControl>
