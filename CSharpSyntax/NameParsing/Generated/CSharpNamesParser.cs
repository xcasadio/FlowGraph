//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 ..\\..\\NameParsing\\CSharpNames.g 2013-10-26 10:43:17

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	// using Expressions.Ast;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  CSharpSyntax.NameParsing 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
 internal  partial class CSharpNamesParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "IDENTIFIER", "IDENTIFIER_NAME_ASCII_START", "IDENTIFIER_PART", "IDENTIFIER_START_ASCII", "WS", "','", "'.'", "'::'", "'<'", "'>'", "'?'", "'['", "']'", "'bool'", "'byte'", "'char'", "'decimal'", "'double'", "'float'", "'int'", "'long'", "'object'", "'sbyte'", "'short'", "'string'", "'uint'", "'ulong'", "'ushort'", "'void'"
	};
	public const int EOF=-1;
	public const int IDENTIFIER=4;
	public const int IDENTIFIER_NAME_ASCII_START=5;
	public const int IDENTIFIER_PART=6;
	public const int IDENTIFIER_START_ASCII=7;
	public const int WS=8;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;

	public CSharpNamesParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CSharpNamesParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[39+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CSharpNamesParser.tokenNames; } }
	public override string GrammarFileName { get { return "..\\..\\NameParsing\\CSharpNames.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	private sealed partial class prog_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public TypeSyntax value;
		public prog_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// ..\\..\\NameParsing\\CSharpNames.g:32:1: prog returns [TypeSyntax value] : an= any_name EOF ;
	[GrammarRule("prog")]
	private CSharpNamesParser.prog_return prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		CSharpNamesParser.prog_return retval = new CSharpNamesParser.prog_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int prog_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF1 = default(CommonToken);
		CSharpNamesParser.any_name_return an = default(CSharpNamesParser.any_name_return);

		CommonTree EOF1_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(32, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:33:5: (an= any_name EOF )
			DebugEnterAlt(1);
			// ..\\..\\NameParsing\\CSharpNames.g:33:7: an= any_name EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(33, 9);
			PushFollow(Follow._any_name_in_prog120);
			an=any_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, an.Tree);
			DebugLocation(33, 19);
			if (state.backtracking == 0)
			{
				 retval.value = (an!=null?an.value:default(TypeSyntax)); 
			}
			DebugLocation(33, 43);
			EOF1=(CommonToken)Match(input,EOF,Follow._EOF_in_prog124); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF1_tree = (CommonTree)adaptor.Create(EOF1);
			adaptor.AddChild(root_0, EOF1_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
			if (state.backtracking > 0) { Memoize(input, 1, prog_StartIndex); }

		}
		DebugLocation(34, 4);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	private sealed partial class any_name_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public TypeSyntax value;
		public any_name_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_any_name();
	partial void LeaveRule_any_name();
	// $ANTLR start "any_name"
	// ..\\..\\NameParsing\\CSharpNames.g:36:1: any_name returns [TypeSyntax value] : a= array ;
	[GrammarRule("any_name")]
	private CSharpNamesParser.any_name_return any_name()
	{
		EnterRule_any_name();
		EnterRule("any_name", 2);
		TraceIn("any_name", 2);
		CSharpNamesParser.any_name_return retval = new CSharpNamesParser.any_name_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int any_name_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CSharpNamesParser.array_return a = default(CSharpNamesParser.array_return);

		try { DebugEnterRule(GrammarFileName, "any_name");
		DebugLocation(36, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:37:5: (a= array )
			DebugEnterAlt(1);
			// ..\\..\\NameParsing\\CSharpNames.g:37:7: a= array
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(37, 8);
			PushFollow(Follow._array_in_any_name147);
			a=array();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, a.Tree);
			DebugLocation(37, 15);
			if (state.backtracking == 0)
			{
				 retval.value = (a!=null?a.value:default(TypeSyntax)); 
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("any_name", 2);
			LeaveRule("any_name", 2);
			LeaveRule_any_name();
			if (state.backtracking > 0) { Memoize(input, 2, any_name_StartIndex); }

		}
		DebugLocation(38, 4);
		} finally { DebugExitRule(GrammarFileName, "any_name"); }
		return retval;

	}
	// $ANTLR end "any_name"

	private sealed partial class array_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public TypeSyntax value;
		public array_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_array();
	partial void LeaveRule_array();
	// $ANTLR start "array"
	// ..\\..\\NameParsing\\CSharpNames.g:40:1: array returns [TypeSyntax value] : (n= nullable ar= array_ranks |n= nullable );
	[GrammarRule("array")]
	private CSharpNamesParser.array_return array()
	{
		EnterRule_array();
		EnterRule("array", 3);
		TraceIn("array", 3);
		CSharpNamesParser.array_return retval = new CSharpNamesParser.array_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int array_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CSharpNamesParser.nullable_return n = default(CSharpNamesParser.nullable_return);
		CSharpNamesParser.array_ranks_return ar = default(CSharpNamesParser.array_ranks_return);

		try { DebugEnterRule(GrammarFileName, "array");
		DebugLocation(40, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:41:5: (n= nullable ar= array_ranks |n= nullable )
			int alt1=2;
			try { DebugEnterDecision(1, false);
			try
			{
				alt1 = dfa1.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\NameParsing\\CSharpNames.g:41:7: n= nullable ar= array_ranks
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(41, 8);
				PushFollow(Follow._nullable_in_array172);
				n=nullable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
				DebugLocation(41, 20);
				PushFollow(Follow._array_ranks_in_array176);
				ar=array_ranks();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ar.Tree);
				DebugLocation(41, 33);
				if (state.backtracking == 0)
				{

					        var result = new ArrayTypeSyntax
					        {
					            ElementType = (n!=null?n.value:default(TypeSyntax))
					        };

					        foreach (var item in (ar!=null?ar.value:default(List<ArrayRankSpecifierSyntax>)))
					        {
					            result.RankSpecifiers.Add(item);
					        }

					        retval.value = result;
					      
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\NameParsing\\CSharpNames.g:54:7: n= nullable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(54, 8);
				PushFollow(Follow._nullable_in_array188);
				n=nullable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
				DebugLocation(54, 18);
				if (state.backtracking == 0)
				{
					 retval.value = (n!=null?n.value:default(TypeSyntax)); 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("array", 3);
			LeaveRule("array", 3);
			LeaveRule_array();
			if (state.backtracking > 0) { Memoize(input, 3, array_StartIndex); }

		}
		DebugLocation(55, 4);
		} finally { DebugExitRule(GrammarFileName, "array"); }
		return retval;

	}
	// $ANTLR end "array"

	private sealed partial class array_ranks_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public List<ArrayRankSpecifierSyntax> value;
		public array_ranks_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_array_ranks();
	partial void LeaveRule_array_ranks();
	// $ANTLR start "array_ranks"
	// ..\\..\\NameParsing\\CSharpNames.g:57:1: array_ranks returns [List<ArrayRankSpecifierSyntax> value] : ( '[' cl= comma_list ']' ar= array_ranks | '[' cl= comma_list ']' );
	[GrammarRule("array_ranks")]
	private CSharpNamesParser.array_ranks_return array_ranks()
	{
		EnterRule_array_ranks();
		EnterRule("array_ranks", 4);
		TraceIn("array_ranks", 4);
		CSharpNamesParser.array_ranks_return retval = new CSharpNamesParser.array_ranks_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int array_ranks_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal2 = default(CommonToken);
		CommonToken char_literal3 = default(CommonToken);
		CommonToken char_literal4 = default(CommonToken);
		CommonToken char_literal5 = default(CommonToken);
		CSharpNamesParser.comma_list_return cl = default(CSharpNamesParser.comma_list_return);
		CSharpNamesParser.array_ranks_return ar = default(CSharpNamesParser.array_ranks_return);

		CommonTree char_literal2_tree = default(CommonTree);
		CommonTree char_literal3_tree = default(CommonTree);
		CommonTree char_literal4_tree = default(CommonTree);
		CommonTree char_literal5_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "array_ranks");
		DebugLocation(57, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:58:5: ( '[' cl= comma_list ']' ar= array_ranks | '[' cl= comma_list ']' )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==15))
			{
				int LA2_2 = input.LA(2);

				if ((LA2_2==16))
				{
					int LA2_3 = input.LA(3);

					if ((EvaluatePredicate(synpred2_CSharpNames_fragment)))
					{
						alt2 = 1;
					}
					else if ((true))
					{
						alt2 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 2, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA2_2==9))
				{
					int LA2_3 = input.LA(3);

					if ((EvaluatePredicate(synpred2_CSharpNames_fragment)))
					{
						alt2 = 1;
					}
					else if ((true))
					{
						alt2 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 2, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\NameParsing\\CSharpNames.g:58:7: '[' cl= comma_list ']' ar= array_ranks
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(58, 7);
				char_literal2=(CommonToken)Match(input,15,Follow._15_in_array_ranks211); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal2_tree = (CommonTree)adaptor.Create(char_literal2);
				adaptor.AddChild(root_0, char_literal2_tree);
				}
				DebugLocation(58, 13);
				PushFollow(Follow._comma_list_in_array_ranks215);
				cl=comma_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cl.Tree);
				DebugLocation(58, 25);
				char_literal3=(CommonToken)Match(input,16,Follow._16_in_array_ranks217); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal3_tree = (CommonTree)adaptor.Create(char_literal3);
				adaptor.AddChild(root_0, char_literal3_tree);
				}
				DebugLocation(58, 31);
				PushFollow(Follow._array_ranks_in_array_ranks221);
				ar=array_ranks();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ar.Tree);
				DebugLocation(58, 44);
				if (state.backtracking == 0)
				{

					        retval.value = (ar!=null?ar.value:default(List<ArrayRankSpecifierSyntax>));
					        retval.value.Insert(0, BuildArrayRankSpecifier((cl!=null?cl.value:default(int))));
					      
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\NameParsing\\CSharpNames.g:62:7: '[' cl= comma_list ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(62, 7);
				char_literal4=(CommonToken)Match(input,15,Follow._15_in_array_ranks231); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal4_tree = (CommonTree)adaptor.Create(char_literal4);
				adaptor.AddChild(root_0, char_literal4_tree);
				}
				DebugLocation(62, 13);
				PushFollow(Follow._comma_list_in_array_ranks235);
				cl=comma_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cl.Tree);
				DebugLocation(62, 25);
				char_literal5=(CommonToken)Match(input,16,Follow._16_in_array_ranks237); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal5_tree = (CommonTree)adaptor.Create(char_literal5);
				adaptor.AddChild(root_0, char_literal5_tree);
				}
				DebugLocation(62, 29);
				if (state.backtracking == 0)
				{

					        retval.value = new List<ArrayRankSpecifierSyntax>
					        {
					            BuildArrayRankSpecifier((cl!=null?cl.value:default(int)))
					        };
					      
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("array_ranks", 4);
			LeaveRule("array_ranks", 4);
			LeaveRule_array_ranks();
			if (state.backtracking > 0) { Memoize(input, 4, array_ranks_StartIndex); }

		}
		DebugLocation(68, 4);
		} finally { DebugExitRule(GrammarFileName, "array_ranks"); }
		return retval;

	}
	// $ANTLR end "array_ranks"

	private sealed partial class nullable_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public TypeSyntax value;
		public nullable_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_nullable();
	partial void LeaveRule_nullable();
	// $ANTLR start "nullable"
	// ..\\..\\NameParsing\\CSharpNames.g:70:1: nullable returns [TypeSyntax value] : (gn= generic_name '?' |gn= generic_name );
	[GrammarRule("nullable")]
	private CSharpNamesParser.nullable_return nullable()
	{
		EnterRule_nullable();
		EnterRule("nullable", 5);
		TraceIn("nullable", 5);
		CSharpNamesParser.nullable_return retval = new CSharpNamesParser.nullable_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int nullable_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal6 = default(CommonToken);
		CSharpNamesParser.generic_name_return gn = default(CSharpNamesParser.generic_name_return);

		CommonTree char_literal6_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "nullable");
		DebugLocation(70, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:71:5: (gn= generic_name '?' |gn= generic_name )
			int alt3=2;
			try { DebugEnterDecision(3, false);
			try
			{
				alt3 = dfa3.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\NameParsing\\CSharpNames.g:71:7: gn= generic_name '?'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(71, 9);
				PushFollow(Follow._generic_name_in_nullable262);
				gn=generic_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gn.Tree);
				DebugLocation(71, 23);
				char_literal6=(CommonToken)Match(input,14,Follow._14_in_nullable264); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal6_tree = (CommonTree)adaptor.Create(char_literal6);
				adaptor.AddChild(root_0, char_literal6_tree);
				}
				DebugLocation(71, 27);
				if (state.backtracking == 0)
				{

					        retval.value = new NullableTypeSyntax
					        {
					            ElementType = (gn!=null?gn.value:default(TypeSyntax))
					        };
					      
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\NameParsing\\CSharpNames.g:77:7: gn= generic_name
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 9);
				PushFollow(Follow._generic_name_in_nullable276);
				gn=generic_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gn.Tree);
				DebugLocation(77, 23);
				if (state.backtracking == 0)
				{
					 retval.value = (gn!=null?gn.value:default(TypeSyntax)); 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("nullable", 5);
			LeaveRule("nullable", 5);
			LeaveRule_nullable();
			if (state.backtracking > 0) { Memoize(input, 5, nullable_StartIndex); }

		}
		DebugLocation(78, 4);
		} finally { DebugExitRule(GrammarFileName, "nullable"); }
		return retval;

	}
	// $ANTLR end "nullable"

	private sealed partial class generic_name_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public TypeSyntax value;
		public generic_name_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_generic_name();
	partial void LeaveRule_generic_name();
	// $ANTLR start "generic_name"
	// ..\\..\\NameParsing\\CSharpNames.g:80:1: generic_name returns [TypeSyntax value] : (n= name '<' bga= bound_generic_arguments '>' |n= name '<' cl= comma_list '>' |n= name );
	[GrammarRule("generic_name")]
	private CSharpNamesParser.generic_name_return generic_name()
	{
		EnterRule_generic_name();
		EnterRule("generic_name", 6);
		TraceIn("generic_name", 6);
		CSharpNamesParser.generic_name_return retval = new CSharpNamesParser.generic_name_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int generic_name_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal7 = default(CommonToken);
		CommonToken char_literal8 = default(CommonToken);
		CommonToken char_literal9 = default(CommonToken);
		CommonToken char_literal10 = default(CommonToken);
		CSharpNamesParser.name_return n = default(CSharpNamesParser.name_return);
		CSharpNamesParser.bound_generic_arguments_return bga = default(CSharpNamesParser.bound_generic_arguments_return);
		CSharpNamesParser.comma_list_return cl = default(CSharpNamesParser.comma_list_return);

		CommonTree char_literal7_tree = default(CommonTree);
		CommonTree char_literal8_tree = default(CommonTree);
		CommonTree char_literal9_tree = default(CommonTree);
		CommonTree char_literal10_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "generic_name");
		DebugLocation(80, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:81:5: (n= name '<' bga= bound_generic_arguments '>' |n= name '<' cl= comma_list '>' |n= name )
			int alt4=3;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\NameParsing\\CSharpNames.g:81:7: n= name '<' bga= bound_generic_arguments '>'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(81, 8);
				PushFollow(Follow._name_in_generic_name301);
				n=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
				DebugLocation(81, 14);
				char_literal7=(CommonToken)Match(input,12,Follow._12_in_generic_name303); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal7_tree = (CommonTree)adaptor.Create(char_literal7);
				adaptor.AddChild(root_0, char_literal7_tree);
				}
				DebugLocation(81, 21);
				PushFollow(Follow._bound_generic_arguments_in_generic_name307);
				bga=bound_generic_arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bga.Tree);
				DebugLocation(81, 46);
				char_literal8=(CommonToken)Match(input,13,Follow._13_in_generic_name309); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal8_tree = (CommonTree)adaptor.Create(char_literal8);
				adaptor.AddChild(root_0, char_literal8_tree);
				}
				DebugLocation(81, 50);
				if (state.backtracking == 0)
				{

					        var result = new GenericNameSyntax
					        {
					            IsUnboundGenericName = false,
					            TypeArgumentList = (bga!=null?bga.value:default(TypeArgumentListSyntax))
					        };

					        retval.value = FixupTree((n!=null?n.value:default(TypeSyntax)), result, (r, p) => r.Identifier = p.Identifier);
					      
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\NameParsing\\CSharpNames.g:90:7: n= name '<' cl= comma_list '>'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(90, 8);
				PushFollow(Follow._name_in_generic_name321);
				n=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
				DebugLocation(90, 14);
				char_literal9=(CommonToken)Match(input,12,Follow._12_in_generic_name323); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal9_tree = (CommonTree)adaptor.Create(char_literal9);
				adaptor.AddChild(root_0, char_literal9_tree);
				}
				DebugLocation(90, 20);
				PushFollow(Follow._comma_list_in_generic_name327);
				cl=comma_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cl.Tree);
				DebugLocation(90, 32);
				char_literal10=(CommonToken)Match(input,13,Follow._13_in_generic_name329); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal10_tree = (CommonTree)adaptor.Create(char_literal10);
				adaptor.AddChild(root_0, char_literal10_tree);
				}
				DebugLocation(90, 36);
				if (state.backtracking == 0)
				{

					        var result = new GenericNameSyntax
					        {
					            IsUnboundGenericName = true,
					            TypeArgumentList = new TypeArgumentListSyntax()
					        };

					        for (int i = 0; i < (cl!=null?cl.value:default(int)); i++)
					        {
					            result.TypeArgumentList.Arguments.Add(new OmittedTypeArgumentSyntax());
					        }

					        retval.value = FixupTree((n!=null?n.value:default(TypeSyntax)), result, (r, p) => r.Identifier = p.Identifier);
					      
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\NameParsing\\CSharpNames.g:104:7: n= name
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(104, 8);
				PushFollow(Follow._name_in_generic_name341);
				n=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, n.Tree);
				DebugLocation(104, 14);
				if (state.backtracking == 0)
				{
					 retval.value = (n!=null?n.value:default(TypeSyntax)); 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("generic_name", 6);
			LeaveRule("generic_name", 6);
			LeaveRule_generic_name();
			if (state.backtracking > 0) { Memoize(input, 6, generic_name_StartIndex); }

		}
		DebugLocation(105, 4);
		} finally { DebugExitRule(GrammarFileName, "generic_name"); }
		return retval;

	}
	// $ANTLR end "generic_name"

	private sealed partial class bound_generic_arguments_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public TypeArgumentListSyntax value;
		public bound_generic_arguments_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_bound_generic_arguments();
	partial void LeaveRule_bound_generic_arguments();
	// $ANTLR start "bound_generic_arguments"
	// ..\\..\\NameParsing\\CSharpNames.g:107:1: bound_generic_arguments returns [TypeArgumentListSyntax value] : (an= any_name ',' bga= bound_generic_arguments |an= any_name );
	[GrammarRule("bound_generic_arguments")]
	private CSharpNamesParser.bound_generic_arguments_return bound_generic_arguments()
	{
		EnterRule_bound_generic_arguments();
		EnterRule("bound_generic_arguments", 7);
		TraceIn("bound_generic_arguments", 7);
		CSharpNamesParser.bound_generic_arguments_return retval = new CSharpNamesParser.bound_generic_arguments_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int bound_generic_arguments_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal11 = default(CommonToken);
		CSharpNamesParser.any_name_return an = default(CSharpNamesParser.any_name_return);
		CSharpNamesParser.bound_generic_arguments_return bga = default(CSharpNamesParser.bound_generic_arguments_return);

		CommonTree char_literal11_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "bound_generic_arguments");
		DebugLocation(107, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:108:5: (an= any_name ',' bga= bound_generic_arguments |an= any_name )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			try
			{
				alt5 = dfa5.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\NameParsing\\CSharpNames.g:108:7: an= any_name ',' bga= bound_generic_arguments
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(108, 9);
				PushFollow(Follow._any_name_in_bound_generic_arguments366);
				an=any_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, an.Tree);
				DebugLocation(108, 19);
				char_literal11=(CommonToken)Match(input,9,Follow._9_in_bound_generic_arguments368); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal11_tree = (CommonTree)adaptor.Create(char_literal11);
				adaptor.AddChild(root_0, char_literal11_tree);
				}
				DebugLocation(108, 26);
				PushFollow(Follow._bound_generic_arguments_in_bound_generic_arguments372);
				bga=bound_generic_arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bga.Tree);
				DebugLocation(108, 51);
				if (state.backtracking == 0)
				{

					        (bga!=null?bga.value:default(TypeArgumentListSyntax)).Arguments.Insert(0, (an!=null?an.value:default(TypeSyntax)));
					        retval.value = (bga!=null?bga.value:default(TypeArgumentListSyntax));
					      
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\NameParsing\\CSharpNames.g:112:7: an= any_name
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(112, 9);
				PushFollow(Follow._any_name_in_bound_generic_arguments384);
				an=any_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, an.Tree);
				DebugLocation(112, 19);
				if (state.backtracking == 0)
				{

					        retval.value = new TypeArgumentListSyntax
					        {
					            Arguments =
					            {
					                (an!=null?an.value:default(TypeSyntax))
					            }
					        };
					      
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("bound_generic_arguments", 7);
			LeaveRule("bound_generic_arguments", 7);
			LeaveRule_bound_generic_arguments();
			if (state.backtracking > 0) { Memoize(input, 7, bound_generic_arguments_StartIndex); }

		}
		DebugLocation(121, 4);
		} finally { DebugExitRule(GrammarFileName, "bound_generic_arguments"); }
		return retval;

	}
	// $ANTLR end "bound_generic_arguments"

	private sealed partial class comma_list_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public int value;
		public comma_list_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_comma_list();
	partial void LeaveRule_comma_list();
	// $ANTLR start "comma_list"
	// ..\\..\\NameParsing\\CSharpNames.g:123:1: comma_list returns [int value] : (| ',' cl= comma_list );
	[GrammarRule("comma_list")]
	private CSharpNamesParser.comma_list_return comma_list()
	{
		EnterRule_comma_list();
		EnterRule("comma_list", 8);
		TraceIn("comma_list", 8);
		CSharpNamesParser.comma_list_return retval = new CSharpNamesParser.comma_list_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int comma_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal12 = default(CommonToken);
		CSharpNamesParser.comma_list_return cl = default(CSharpNamesParser.comma_list_return);

		CommonTree char_literal12_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "comma_list");
		DebugLocation(123, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:124:5: (| ',' cl= comma_list )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==13||LA6_1==16))
			{
				alt6 = 1;
			}
			else if ((LA6_1==9))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\NameParsing\\CSharpNames.g:124:7: 
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(124, 7);
				if (state.backtracking == 0)
				{
					 retval.value = 1; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\NameParsing\\CSharpNames.g:125:7: ',' cl= comma_list
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(125, 7);
				char_literal12=(CommonToken)Match(input,9,Follow._9_in_comma_list415); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal12_tree = (CommonTree)adaptor.Create(char_literal12);
				adaptor.AddChild(root_0, char_literal12_tree);
				}
				DebugLocation(125, 13);
				PushFollow(Follow._comma_list_in_comma_list419);
				cl=comma_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cl.Tree);
				DebugLocation(125, 25);
				if (state.backtracking == 0)
				{
					 retval.value = (cl!=null?cl.value:default(int)) + 1; 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("comma_list", 8);
			LeaveRule("comma_list", 8);
			LeaveRule_comma_list();
			if (state.backtracking > 0) { Memoize(input, 8, comma_list_StartIndex); }

		}
		DebugLocation(126, 4);
		} finally { DebugExitRule(GrammarFileName, "comma_list"); }
		return retval;

	}
	// $ANTLR end "comma_list"

	private sealed partial class name_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public TypeSyntax value;
		public name_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_name();
	partial void LeaveRule_name();
	// $ANTLR start "name"
	// ..\\..\\NameParsing\\CSharpNames.g:128:1: name returns [TypeSyntax value] : (p= predefined |aq= alias_qualified );
	[GrammarRule("name")]
	private CSharpNamesParser.name_return name()
	{
		EnterRule_name();
		EnterRule("name", 9);
		TraceIn("name", 9);
		CSharpNamesParser.name_return retval = new CSharpNamesParser.name_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int name_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CSharpNamesParser.predefined_return p = default(CSharpNamesParser.predefined_return);
		CSharpNamesParser.alias_qualified_return aq = default(CSharpNamesParser.alias_qualified_return);

		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(128, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:129:5: (p= predefined |aq= alias_qualified )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if (((LA7_1>=17 && LA7_1<=32)))
			{
				alt7 = 1;
			}
			else if ((LA7_1==IDENTIFIER))
			{
				alt7 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\NameParsing\\CSharpNames.g:129:7: p= predefined
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(129, 8);
				PushFollow(Follow._predefined_in_name444);
				p=predefined();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, p.Tree);
				DebugLocation(129, 20);
				if (state.backtracking == 0)
				{
					 retval.value = (p!=null?p.value:default(PredefinedTypeSyntax)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\NameParsing\\CSharpNames.g:130:7: aq= alias_qualified
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(130, 9);
				PushFollow(Follow._alias_qualified_in_name456);
				aq=alias_qualified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, aq.Tree);
				DebugLocation(130, 26);
				if (state.backtracking == 0)
				{
					 retval.value = (aq!=null?aq.value:default(NameSyntax)); 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("name", 9);
			LeaveRule("name", 9);
			LeaveRule_name();
			if (state.backtracking > 0) { Memoize(input, 9, name_StartIndex); }

		}
		DebugLocation(131, 4);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return retval;

	}
	// $ANTLR end "name"

	private sealed partial class alias_qualified_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public NameSyntax value;
		public alias_qualified_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_alias_qualified();
	partial void LeaveRule_alias_qualified();
	// $ANTLR start "alias_qualified"
	// ..\\..\\NameParsing\\CSharpNames.g:133:1: alias_qualified returns [NameSyntax value] : (i= identifier '::' q= qualified |q= qualified );
	[GrammarRule("alias_qualified")]
	private CSharpNamesParser.alias_qualified_return alias_qualified()
	{
		EnterRule_alias_qualified();
		EnterRule("alias_qualified", 10);
		TraceIn("alias_qualified", 10);
		CSharpNamesParser.alias_qualified_return retval = new CSharpNamesParser.alias_qualified_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int alias_qualified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal13 = default(CommonToken);
		CSharpNamesParser.identifier_return i = default(CSharpNamesParser.identifier_return);
		CSharpNamesParser.qualified_return q = default(CSharpNamesParser.qualified_return);

		CommonTree string_literal13_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "alias_qualified");
		DebugLocation(133, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:134:5: (i= identifier '::' q= qualified |q= qualified )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==IDENTIFIER))
			{
				int LA8_2 = input.LA(2);

				if ((LA8_2==11))
				{
					alt8 = 1;
				}
				else if ((LA8_2==EOF||(LA8_2>=9 && LA8_2<=10)||(LA8_2>=12 && LA8_2<=15)))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\NameParsing\\CSharpNames.g:134:7: i= identifier '::' q= qualified
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(134, 8);
				PushFollow(Follow._identifier_in_alias_qualified481);
				i=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, i.Tree);
				DebugLocation(134, 20);
				string_literal13=(CommonToken)Match(input,11,Follow._11_in_alias_qualified483); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal13_tree = (CommonTree)adaptor.Create(string_literal13);
				adaptor.AddChild(root_0, string_literal13_tree);
				}
				DebugLocation(134, 26);
				PushFollow(Follow._qualified_in_alias_qualified487);
				q=qualified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, q.Tree);
				DebugLocation(134, 37);
				if (state.backtracking == 0)
				{
					 retval.value = BuildAliasQualifiedName((i!=null?i.value:default(IdentifierNameSyntax)), (q!=null?q.value:default(NameSyntax))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\NameParsing\\CSharpNames.g:135:7: q= qualified
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(135, 8);
				PushFollow(Follow._qualified_in_alias_qualified499);
				q=qualified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, q.Tree);
				DebugLocation(135, 19);
				if (state.backtracking == 0)
				{
					 retval.value = (q!=null?q.value:default(NameSyntax)); 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("alias_qualified", 10);
			LeaveRule("alias_qualified", 10);
			LeaveRule_alias_qualified();
			if (state.backtracking > 0) { Memoize(input, 10, alias_qualified_StartIndex); }

		}
		DebugLocation(136, 4);
		} finally { DebugExitRule(GrammarFileName, "alias_qualified"); }
		return retval;

	}
	// $ANTLR end "alias_qualified"

	private sealed partial class qualified_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public NameSyntax value;
		public qualified_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_qualified();
	partial void LeaveRule_qualified();
	// $ANTLR start "qualified"
	// ..\\..\\NameParsing\\CSharpNames.g:138:1: qualified returns [NameSyntax value] : (i= identifier |i= identifier '.' q= qualified );
	[GrammarRule("qualified")]
	private CSharpNamesParser.qualified_return qualified()
	{
		EnterRule_qualified();
		EnterRule("qualified", 11);
		TraceIn("qualified", 11);
		CSharpNamesParser.qualified_return retval = new CSharpNamesParser.qualified_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int qualified_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal14 = default(CommonToken);
		CSharpNamesParser.identifier_return i = default(CSharpNamesParser.identifier_return);
		CSharpNamesParser.qualified_return q = default(CSharpNamesParser.qualified_return);

		CommonTree char_literal14_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "qualified");
		DebugLocation(138, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:139:5: (i= identifier |i= identifier '.' q= qualified )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==IDENTIFIER))
			{
				int LA9_2 = input.LA(2);

				if ((LA9_2==EOF||LA9_2==9||(LA9_2>=12 && LA9_2<=15)))
				{
					alt9 = 1;
				}
				else if ((LA9_2==10))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\NameParsing\\CSharpNames.g:139:7: i= identifier
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(139, 8);
				PushFollow(Follow._identifier_in_qualified524);
				i=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, i.Tree);
				DebugLocation(139, 20);
				if (state.backtracking == 0)
				{
					 retval.value = (i!=null?i.value:default(IdentifierNameSyntax)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\NameParsing\\CSharpNames.g:140:7: i= identifier '.' q= qualified
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(140, 8);
				PushFollow(Follow._identifier_in_qualified536);
				i=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, i.Tree);
				DebugLocation(140, 20);
				char_literal14=(CommonToken)Match(input,10,Follow._10_in_qualified538); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal14_tree = (CommonTree)adaptor.Create(char_literal14);
				adaptor.AddChild(root_0, char_literal14_tree);
				}
				DebugLocation(140, 25);
				PushFollow(Follow._qualified_in_qualified542);
				q=qualified();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, q.Tree);
				DebugLocation(140, 36);
				if (state.backtracking == 0)
				{
					 retval.value = BuildQualifiedName((i!=null?i.value:default(IdentifierNameSyntax)), (q!=null?q.value:default(NameSyntax))); 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("qualified", 11);
			LeaveRule("qualified", 11);
			LeaveRule_qualified();
			if (state.backtracking > 0) { Memoize(input, 11, qualified_StartIndex); }

		}
		DebugLocation(141, 4);
		} finally { DebugExitRule(GrammarFileName, "qualified"); }
		return retval;

	}
	// $ANTLR end "qualified"

	private sealed partial class predefined_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public PredefinedTypeSyntax value;
		public predefined_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_predefined();
	partial void LeaveRule_predefined();
	// $ANTLR start "predefined"
	// ..\\..\\NameParsing\\CSharpNames.g:143:1: predefined returns [PredefinedTypeSyntax value] : pt= predefined_type ;
	[GrammarRule("predefined")]
	private CSharpNamesParser.predefined_return predefined()
	{
		EnterRule_predefined();
		EnterRule("predefined", 12);
		TraceIn("predefined", 12);
		CSharpNamesParser.predefined_return retval = new CSharpNamesParser.predefined_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int predefined_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CSharpNamesParser.predefined_type_return pt = default(CSharpNamesParser.predefined_type_return);

		try { DebugEnterRule(GrammarFileName, "predefined");
		DebugLocation(143, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:144:5: (pt= predefined_type )
			DebugEnterAlt(1);
			// ..\\..\\NameParsing\\CSharpNames.g:144:7: pt= predefined_type
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(144, 9);
			PushFollow(Follow._predefined_type_in_predefined567);
			pt=predefined_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, pt.Tree);
			DebugLocation(144, 26);
			if (state.backtracking == 0)
			{

				        retval.value = new PredefinedTypeSyntax
				        {
				            Type = (pt!=null?pt.value:default(PredefinedType))
				        };
				      
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("predefined", 12);
			LeaveRule("predefined", 12);
			LeaveRule_predefined();
			if (state.backtracking > 0) { Memoize(input, 12, predefined_StartIndex); }

		}
		DebugLocation(150, 4);
		} finally { DebugExitRule(GrammarFileName, "predefined"); }
		return retval;

	}
	// $ANTLR end "predefined"

	private sealed partial class predefined_type_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public PredefinedType value;
		public predefined_type_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_predefined_type();
	partial void LeaveRule_predefined_type();
	// $ANTLR start "predefined_type"
	// ..\\..\\NameParsing\\CSharpNames.g:152:1: predefined_type returns [PredefinedType value] : ( 'byte' | 'sbyte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'bool' | 'double' | 'float' | 'decimal' | 'string' | 'char' | 'void' | 'object' );
	[GrammarRule("predefined_type")]
	private CSharpNamesParser.predefined_type_return predefined_type()
	{
		EnterRule_predefined_type();
		EnterRule("predefined_type", 13);
		TraceIn("predefined_type", 13);
		CSharpNamesParser.predefined_type_return retval = new CSharpNamesParser.predefined_type_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int predefined_type_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal15 = default(CommonToken);
		CommonToken string_literal16 = default(CommonToken);
		CommonToken string_literal17 = default(CommonToken);
		CommonToken string_literal18 = default(CommonToken);
		CommonToken string_literal19 = default(CommonToken);
		CommonToken string_literal20 = default(CommonToken);
		CommonToken string_literal21 = default(CommonToken);
		CommonToken string_literal22 = default(CommonToken);
		CommonToken string_literal23 = default(CommonToken);
		CommonToken string_literal24 = default(CommonToken);
		CommonToken string_literal25 = default(CommonToken);
		CommonToken string_literal26 = default(CommonToken);
		CommonToken string_literal27 = default(CommonToken);
		CommonToken string_literal28 = default(CommonToken);
		CommonToken string_literal29 = default(CommonToken);
		CommonToken string_literal30 = default(CommonToken);

		CommonTree string_literal15_tree = default(CommonTree);
		CommonTree string_literal16_tree = default(CommonTree);
		CommonTree string_literal17_tree = default(CommonTree);
		CommonTree string_literal18_tree = default(CommonTree);
		CommonTree string_literal19_tree = default(CommonTree);
		CommonTree string_literal20_tree = default(CommonTree);
		CommonTree string_literal21_tree = default(CommonTree);
		CommonTree string_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree string_literal24_tree = default(CommonTree);
		CommonTree string_literal25_tree = default(CommonTree);
		CommonTree string_literal26_tree = default(CommonTree);
		CommonTree string_literal27_tree = default(CommonTree);
		CommonTree string_literal28_tree = default(CommonTree);
		CommonTree string_literal29_tree = default(CommonTree);
		CommonTree string_literal30_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "predefined_type");
		DebugLocation(152, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:153:5: ( 'byte' | 'sbyte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'bool' | 'double' | 'float' | 'decimal' | 'string' | 'char' | 'void' | 'object' )
			int alt10=16;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case 18:
				{
				alt10 = 1;
				}
				break;
			case 26:
				{
				alt10 = 2;
				}
				break;
			case 27:
				{
				alt10 = 3;
				}
				break;
			case 31:
				{
				alt10 = 4;
				}
				break;
			case 23:
				{
				alt10 = 5;
				}
				break;
			case 29:
				{
				alt10 = 6;
				}
				break;
			case 24:
				{
				alt10 = 7;
				}
				break;
			case 30:
				{
				alt10 = 8;
				}
				break;
			case 17:
				{
				alt10 = 9;
				}
				break;
			case 21:
				{
				alt10 = 10;
				}
				break;
			case 22:
				{
				alt10 = 11;
				}
				break;
			case 20:
				{
				alt10 = 12;
				}
				break;
			case 28:
				{
				alt10 = 13;
				}
				break;
			case 19:
				{
				alt10 = 14;
				}
				break;
			case 32:
				{
				alt10 = 15;
				}
				break;
			case 25:
				{
				alt10 = 16;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\NameParsing\\CSharpNames.g:153:7: 'byte'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(153, 7);
				string_literal15=(CommonToken)Match(input,18,Follow._18_in_predefined_type590); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal15_tree = (CommonTree)adaptor.Create(string_literal15);
				adaptor.AddChild(root_0, string_literal15_tree);
				}
				DebugLocation(153, 14);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Byte; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\NameParsing\\CSharpNames.g:154:7: 'sbyte'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(154, 7);
				string_literal16=(CommonToken)Match(input,26,Follow._26_in_predefined_type600); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal16_tree = (CommonTree)adaptor.Create(string_literal16);
				adaptor.AddChild(root_0, string_literal16_tree);
				}
				DebugLocation(154, 15);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.SByte; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\NameParsing\\CSharpNames.g:155:7: 'short'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(155, 7);
				string_literal17=(CommonToken)Match(input,27,Follow._27_in_predefined_type610); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal17_tree = (CommonTree)adaptor.Create(string_literal17);
				adaptor.AddChild(root_0, string_literal17_tree);
				}
				DebugLocation(155, 15);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Short; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\NameParsing\\CSharpNames.g:156:7: 'ushort'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(156, 7);
				string_literal18=(CommonToken)Match(input,31,Follow._31_in_predefined_type620); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal18_tree = (CommonTree)adaptor.Create(string_literal18);
				adaptor.AddChild(root_0, string_literal18_tree);
				}
				DebugLocation(156, 16);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.UShort; 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\NameParsing\\CSharpNames.g:157:7: 'int'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 7);
				string_literal19=(CommonToken)Match(input,23,Follow._23_in_predefined_type630); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal19_tree = (CommonTree)adaptor.Create(string_literal19);
				adaptor.AddChild(root_0, string_literal19_tree);
				}
				DebugLocation(157, 13);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Int; 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\NameParsing\\CSharpNames.g:158:7: 'uint'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(158, 7);
				string_literal20=(CommonToken)Match(input,29,Follow._29_in_predefined_type640); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal20_tree = (CommonTree)adaptor.Create(string_literal20);
				adaptor.AddChild(root_0, string_literal20_tree);
				}
				DebugLocation(158, 14);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.UInt; 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\NameParsing\\CSharpNames.g:159:7: 'long'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(159, 7);
				string_literal21=(CommonToken)Match(input,24,Follow._24_in_predefined_type650); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal21_tree = (CommonTree)adaptor.Create(string_literal21);
				adaptor.AddChild(root_0, string_literal21_tree);
				}
				DebugLocation(159, 14);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Long; 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\NameParsing\\CSharpNames.g:160:7: 'ulong'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(160, 7);
				string_literal22=(CommonToken)Match(input,30,Follow._30_in_predefined_type660); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal22_tree = (CommonTree)adaptor.Create(string_literal22);
				adaptor.AddChild(root_0, string_literal22_tree);
				}
				DebugLocation(160, 15);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.ULong; 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\..\\NameParsing\\CSharpNames.g:161:7: 'bool'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(161, 7);
				string_literal23=(CommonToken)Match(input,17,Follow._17_in_predefined_type670); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal23_tree = (CommonTree)adaptor.Create(string_literal23);
				adaptor.AddChild(root_0, string_literal23_tree);
				}
				DebugLocation(161, 14);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Bool; 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// ..\\..\\NameParsing\\CSharpNames.g:162:7: 'double'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 7);
				string_literal24=(CommonToken)Match(input,21,Follow._21_in_predefined_type680); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal24_tree = (CommonTree)adaptor.Create(string_literal24);
				adaptor.AddChild(root_0, string_literal24_tree);
				}
				DebugLocation(162, 16);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Double; 
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// ..\\..\\NameParsing\\CSharpNames.g:163:7: 'float'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(163, 7);
				string_literal25=(CommonToken)Match(input,22,Follow._22_in_predefined_type690); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal25_tree = (CommonTree)adaptor.Create(string_literal25);
				adaptor.AddChild(root_0, string_literal25_tree);
				}
				DebugLocation(163, 15);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Float; 
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// ..\\..\\NameParsing\\CSharpNames.g:164:7: 'decimal'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(164, 7);
				string_literal26=(CommonToken)Match(input,20,Follow._20_in_predefined_type700); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal26_tree = (CommonTree)adaptor.Create(string_literal26);
				adaptor.AddChild(root_0, string_literal26_tree);
				}
				DebugLocation(164, 17);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Decimal; 
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// ..\\..\\NameParsing\\CSharpNames.g:165:7: 'string'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(165, 7);
				string_literal27=(CommonToken)Match(input,28,Follow._28_in_predefined_type710); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal27_tree = (CommonTree)adaptor.Create(string_literal27);
				adaptor.AddChild(root_0, string_literal27_tree);
				}
				DebugLocation(165, 16);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.String; 
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// ..\\..\\NameParsing\\CSharpNames.g:166:7: 'char'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(166, 7);
				string_literal28=(CommonToken)Match(input,19,Follow._19_in_predefined_type720); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal28_tree = (CommonTree)adaptor.Create(string_literal28);
				adaptor.AddChild(root_0, string_literal28_tree);
				}
				DebugLocation(166, 14);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Char; 
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// ..\\..\\NameParsing\\CSharpNames.g:167:7: 'void'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(167, 7);
				string_literal29=(CommonToken)Match(input,32,Follow._32_in_predefined_type730); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal29_tree = (CommonTree)adaptor.Create(string_literal29);
				adaptor.AddChild(root_0, string_literal29_tree);
				}
				DebugLocation(167, 14);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Void; 
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// ..\\..\\NameParsing\\CSharpNames.g:168:7: 'object'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(168, 7);
				string_literal30=(CommonToken)Match(input,25,Follow._25_in_predefined_type740); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal30_tree = (CommonTree)adaptor.Create(string_literal30);
				adaptor.AddChild(root_0, string_literal30_tree);
				}
				DebugLocation(168, 16);
				if (state.backtracking == 0)
				{
					 retval.value = PredefinedType.Object; 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("predefined_type", 13);
			LeaveRule("predefined_type", 13);
			LeaveRule_predefined_type();
			if (state.backtracking > 0) { Memoize(input, 13, predefined_type_StartIndex); }

		}
		DebugLocation(169, 4);
		} finally { DebugExitRule(GrammarFileName, "predefined_type"); }
		return retval;

	}
	// $ANTLR end "predefined_type"

	private sealed partial class identifier_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IdentifierNameSyntax value;
		public identifier_return(CSharpNamesParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSharpNamesParser grammar);
	}

	partial void EnterRule_identifier();
	partial void LeaveRule_identifier();
	// $ANTLR start "identifier"
	// ..\\..\\NameParsing\\CSharpNames.g:171:1: identifier returns [IdentifierNameSyntax value] : IDENTIFIER ;
	[GrammarRule("identifier")]
	private CSharpNamesParser.identifier_return identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 14);
		TraceIn("identifier", 14);
		CSharpNamesParser.identifier_return retval = new CSharpNamesParser.identifier_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int identifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER31 = default(CommonToken);

		CommonTree IDENTIFIER31_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(171, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// ..\\..\\NameParsing\\CSharpNames.g:172:5: ( IDENTIFIER )
			DebugEnterAlt(1);
			// ..\\..\\NameParsing\\CSharpNames.g:172:7: IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(172, 7);
			IDENTIFIER31=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier763); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER31_tree = (CommonTree)adaptor.Create(IDENTIFIER31);
			adaptor.AddChild(root_0, IDENTIFIER31_tree);
			}
			DebugLocation(172, 18);
			if (state.backtracking == 0)
			{

				        retval.value = new IdentifierNameSyntax
				        {
				            Identifier = (IDENTIFIER31!=null?IDENTIFIER31.Text:null)
				        };
				      
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("identifier", 14);
			LeaveRule("identifier", 14);
			LeaveRule_identifier();
			if (state.backtracking > 0) { Memoize(input, 14, identifier_StartIndex); }

		}
		DebugLocation(178, 4);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"

	partial void EnterRule_synpred1_CSharpNames_fragment();
	partial void LeaveRule_synpred1_CSharpNames_fragment();

	// $ANTLR start synpred1_CSharpNames
	public void synpred1_CSharpNames_fragment()
	{
		CSharpNamesParser.nullable_return n = default(CSharpNamesParser.nullable_return);
		CSharpNamesParser.array_ranks_return ar = default(CSharpNamesParser.array_ranks_return);

		EnterRule_synpred1_CSharpNames_fragment();
		EnterRule("synpred1_CSharpNames_fragment", 15);
		TraceIn("synpred1_CSharpNames_fragment", 15);
		try
		{
			// ..\\..\\NameParsing\\CSharpNames.g:41:7: (n= nullable ar= array_ranks )
			DebugEnterAlt(1);
			// ..\\..\\NameParsing\\CSharpNames.g:41:7: n= nullable ar= array_ranks
			{
			DebugLocation(41, 8);
			PushFollow(Follow._nullable_in_synpred1_CSharpNames172);
			n=nullable();
			PopFollow();
			if (state.failed) return;
			DebugLocation(41, 20);
			PushFollow(Follow._array_ranks_in_synpred1_CSharpNames176);
			ar=array_ranks();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_CSharpNames_fragment", 15);
			LeaveRule("synpred1_CSharpNames_fragment", 15);
			LeaveRule_synpred1_CSharpNames_fragment();
		}
	}
	// $ANTLR end synpred1_CSharpNames

	partial void EnterRule_synpred2_CSharpNames_fragment();
	partial void LeaveRule_synpred2_CSharpNames_fragment();

	// $ANTLR start synpred2_CSharpNames
	public void synpred2_CSharpNames_fragment()
	{
		CSharpNamesParser.comma_list_return cl = default(CSharpNamesParser.comma_list_return);
		CSharpNamesParser.array_ranks_return ar = default(CSharpNamesParser.array_ranks_return);

		EnterRule_synpred2_CSharpNames_fragment();
		EnterRule("synpred2_CSharpNames_fragment", 16);
		TraceIn("synpred2_CSharpNames_fragment", 16);
		try
		{
			// ..\\..\\NameParsing\\CSharpNames.g:58:7: ( '[' cl= comma_list ']' ar= array_ranks )
			DebugEnterAlt(1);
			// ..\\..\\NameParsing\\CSharpNames.g:58:7: '[' cl= comma_list ']' ar= array_ranks
			{
			DebugLocation(58, 7);
			Match(input,15,Follow._15_in_synpred2_CSharpNames211); if (state.failed) return;
			DebugLocation(58, 13);
			PushFollow(Follow._comma_list_in_synpred2_CSharpNames215);
			cl=comma_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(58, 25);
			Match(input,16,Follow._16_in_synpred2_CSharpNames217); if (state.failed) return;
			DebugLocation(58, 31);
			PushFollow(Follow._array_ranks_in_synpred2_CSharpNames221);
			ar=array_ranks();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_CSharpNames_fragment", 16);
			LeaveRule("synpred2_CSharpNames_fragment", 16);
			LeaveRule_synpred2_CSharpNames_fragment();
		}
	}
	// $ANTLR end synpred2_CSharpNames

	partial void EnterRule_synpred3_CSharpNames_fragment();
	partial void LeaveRule_synpred3_CSharpNames_fragment();

	// $ANTLR start synpred3_CSharpNames
	public void synpred3_CSharpNames_fragment()
	{
		CSharpNamesParser.generic_name_return gn = default(CSharpNamesParser.generic_name_return);

		EnterRule_synpred3_CSharpNames_fragment();
		EnterRule("synpred3_CSharpNames_fragment", 17);
		TraceIn("synpred3_CSharpNames_fragment", 17);
		try
		{
			// ..\\..\\NameParsing\\CSharpNames.g:71:7: (gn= generic_name '?' )
			DebugEnterAlt(1);
			// ..\\..\\NameParsing\\CSharpNames.g:71:7: gn= generic_name '?'
			{
			DebugLocation(71, 9);
			PushFollow(Follow._generic_name_in_synpred3_CSharpNames262);
			gn=generic_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(71, 23);
			Match(input,14,Follow._14_in_synpred3_CSharpNames264); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_CSharpNames_fragment", 17);
			LeaveRule("synpred3_CSharpNames_fragment", 17);
			LeaveRule_synpred3_CSharpNames_fragment();
		}
	}
	// $ANTLR end synpred3_CSharpNames

	partial void EnterRule_synpred4_CSharpNames_fragment();
	partial void LeaveRule_synpred4_CSharpNames_fragment();

	// $ANTLR start synpred4_CSharpNames
	public void synpred4_CSharpNames_fragment()
	{
		CSharpNamesParser.name_return n = default(CSharpNamesParser.name_return);
		CSharpNamesParser.bound_generic_arguments_return bga = default(CSharpNamesParser.bound_generic_arguments_return);

		EnterRule_synpred4_CSharpNames_fragment();
		EnterRule("synpred4_CSharpNames_fragment", 18);
		TraceIn("synpred4_CSharpNames_fragment", 18);
		try
		{
			// ..\\..\\NameParsing\\CSharpNames.g:81:7: (n= name '<' bga= bound_generic_arguments '>' )
			DebugEnterAlt(1);
			// ..\\..\\NameParsing\\CSharpNames.g:81:7: n= name '<' bga= bound_generic_arguments '>'
			{
			DebugLocation(81, 8);
			PushFollow(Follow._name_in_synpred4_CSharpNames301);
			n=name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(81, 14);
			Match(input,12,Follow._12_in_synpred4_CSharpNames303); if (state.failed) return;
			DebugLocation(81, 21);
			PushFollow(Follow._bound_generic_arguments_in_synpred4_CSharpNames307);
			bga=bound_generic_arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(81, 46);
			Match(input,13,Follow._13_in_synpred4_CSharpNames309); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_CSharpNames_fragment", 18);
			LeaveRule("synpred4_CSharpNames_fragment", 18);
			LeaveRule_synpred4_CSharpNames_fragment();
		}
	}
	// $ANTLR end synpred4_CSharpNames

	partial void EnterRule_synpred5_CSharpNames_fragment();
	partial void LeaveRule_synpred5_CSharpNames_fragment();

	// $ANTLR start synpred5_CSharpNames
	public void synpred5_CSharpNames_fragment()
	{
		CSharpNamesParser.name_return n = default(CSharpNamesParser.name_return);
		CSharpNamesParser.comma_list_return cl = default(CSharpNamesParser.comma_list_return);

		EnterRule_synpred5_CSharpNames_fragment();
		EnterRule("synpred5_CSharpNames_fragment", 19);
		TraceIn("synpred5_CSharpNames_fragment", 19);
		try
		{
			// ..\\..\\NameParsing\\CSharpNames.g:90:7: (n= name '<' cl= comma_list '>' )
			DebugEnterAlt(1);
			// ..\\..\\NameParsing\\CSharpNames.g:90:7: n= name '<' cl= comma_list '>'
			{
			DebugLocation(90, 8);
			PushFollow(Follow._name_in_synpred5_CSharpNames321);
			n=name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(90, 14);
			Match(input,12,Follow._12_in_synpred5_CSharpNames323); if (state.failed) return;
			DebugLocation(90, 20);
			PushFollow(Follow._comma_list_in_synpred5_CSharpNames327);
			cl=comma_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(90, 32);
			Match(input,13,Follow._13_in_synpred5_CSharpNames329); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_CSharpNames_fragment", 19);
			LeaveRule("synpred5_CSharpNames_fragment", 19);
			LeaveRule_synpred5_CSharpNames_fragment();
		}
	}
	// $ANTLR end synpred5_CSharpNames

	partial void EnterRule_synpred6_CSharpNames_fragment();
	partial void LeaveRule_synpred6_CSharpNames_fragment();

	// $ANTLR start synpred6_CSharpNames
	public void synpred6_CSharpNames_fragment()
	{
		CSharpNamesParser.any_name_return an = default(CSharpNamesParser.any_name_return);
		CSharpNamesParser.bound_generic_arguments_return bga = default(CSharpNamesParser.bound_generic_arguments_return);

		EnterRule_synpred6_CSharpNames_fragment();
		EnterRule("synpred6_CSharpNames_fragment", 20);
		TraceIn("synpred6_CSharpNames_fragment", 20);
		try
		{
			// ..\\..\\NameParsing\\CSharpNames.g:108:7: (an= any_name ',' bga= bound_generic_arguments )
			DebugEnterAlt(1);
			// ..\\..\\NameParsing\\CSharpNames.g:108:7: an= any_name ',' bga= bound_generic_arguments
			{
			DebugLocation(108, 9);
			PushFollow(Follow._any_name_in_synpred6_CSharpNames366);
			an=any_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(108, 19);
			Match(input,9,Follow._9_in_synpred6_CSharpNames368); if (state.failed) return;
			DebugLocation(108, 26);
			PushFollow(Follow._bound_generic_arguments_in_synpred6_CSharpNames372);
			bga=bound_generic_arguments();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_CSharpNames_fragment", 20);
			LeaveRule("synpred6_CSharpNames_fragment", 20);
			LeaveRule_synpred6_CSharpNames_fragment();
		}
	}
	// $ANTLR end synpred6_CSharpNames
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA1 dfa1;
	private DFA3 dfa3;
	private DFA4 dfa4;
	private DFA5 dfa5;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa1 = new DFA1( this, SpecialStateTransition1 );
		dfa3 = new DFA3( this, SpecialStateTransition3 );
		dfa4 = new DFA4( this, SpecialStateTransition4 );
		dfa5 = new DFA5( this, SpecialStateTransition5 );
	}

	private class DFA1 : DFA
	{
		private const string DFA1_eotS =
			"\x7A\xFFFF";
		private const string DFA1_eofS =
			"\x1\xFFFF\x11\x15\x68\xFFFF";
		private const string DFA1_minS =
			"\x1\x4\x11\x9\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF"+
			"\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4"+
			"\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2"+
			"\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x4\x0\x4\xFFFF";
		private const string DFA1_maxS =
			"\x1\x20\x11\xF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4"+
			"\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2"+
			"\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF"+
			"\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x2\x0\x4\xFFFF\x4\x0\x4\xFFFF";
		private const string DFA1_acceptS =
			"\x14\xFFFF\x1\x1\x1\x2\x64\xFFFF";
		private const string DFA1_specialS =
			"\x12\xFFFF\x1\x0\x1\x1\x4\xFFFF\x1\x2\x1\x3\x4\xFFFF\x1\x4\x1\x5\x4\xFFFF"+
			"\x1\x6\x1\x7\x4\xFFFF\x1\x8\x1\x9\x4\xFFFF\x1\xA\x1\xB\x4\xFFFF\x1\xC"+
			"\x1\xD\x4\xFFFF\x1\xE\x1\xF\x4\xFFFF\x1\x10\x1\x11\x4\xFFFF\x1\x12\x1"+
			"\x13\x4\xFFFF\x1\x14\x1\x15\x4\xFFFF\x1\x16\x1\x17\x4\xFFFF\x1\x18\x1"+
			"\x19\x4\xFFFF\x1\x1A\x1\x1B\x4\xFFFF\x1\x1C\x1\x1D\x4\xFFFF\x1\x1E\x1"+
			"\x1F\x4\xFFFF\x1\x20\x1\x21\x1\x22\x1\x23\x4\xFFFF}>";
		private static readonly string[] DFA1_transitionS =
			{
				"\x1\x11\xC\xFFFF\x1\x9\x1\x1\x1\xE\x1\xC\x1\xA\x1\xB\x1\x5\x1\x7\x1"+
				"\x10\x1\x2\x1\x3\x1\xD\x1\x6\x1\x8\x1\x4\x1\xF",
				"\x1\x15\x2\xFFFF\x1\x12\x1\x15\x1\x13\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x18\x1\x15\x1\x19\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x1E\x1\x15\x1\x1F\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x24\x1\x15\x1\x25\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x2A\x1\x15\x1\x2B\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x30\x1\x15\x1\x31\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x36\x1\x15\x1\x37\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x3C\x1\x15\x1\x3D\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x42\x1\x15\x1\x43\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x48\x1\x15\x1\x49\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x4E\x1\x15\x1\x4F\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x54\x1\x15\x1\x55\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x5A\x1\x15\x1\x5B\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x60\x1\x15\x1\x61\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x66\x1\x15\x1\x67\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x6C\x1\x15\x1\x6D\x1\x14",
				"\x1\x15\x1\x74\x1\x72\x1\x73\x1\x15\x1\x75\x1\x14",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA1_eot = DFA.UnpackEncodedString(DFA1_eotS);
		private static readonly short[] DFA1_eof = DFA.UnpackEncodedString(DFA1_eofS);
		private static readonly char[] DFA1_min = DFA.UnpackEncodedStringToUnsignedChars(DFA1_minS);
		private static readonly char[] DFA1_max = DFA.UnpackEncodedStringToUnsignedChars(DFA1_maxS);
		private static readonly short[] DFA1_accept = DFA.UnpackEncodedString(DFA1_acceptS);
		private static readonly short[] DFA1_special = DFA.UnpackEncodedString(DFA1_specialS);
		private static readonly short[][] DFA1_transition;

		static DFA1()
		{
			int numStates = DFA1_transitionS.Length;
			DFA1_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA1_transition[i] = DFA.UnpackEncodedString(DFA1_transitionS[i]);
			}
		}

		public DFA1( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 1;
			this.eot = DFA1_eot;
			this.eof = DFA1_eof;
			this.min = DFA1_min;
			this.max = DFA1_max;
			this.accept = DFA1_accept;
			this.special = DFA1_special;
			this.transition = DFA1_transition;
		}

		public override string Description { get { return "40:1: array returns [TypeSyntax value] : (n= nullable ar= array_ranks |n= nullable );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition1(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA1_1 = input.LA(1);
		int index1_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred1_CSharpNames_fragment))) {s = 20;}

				else if ((true)) {s = 21;}

				input.Seek(index1_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 1, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x7A\xFFFF";
		private const string DFA3_eofS =
			"\x1\xFFFF\x11\x14\x68\xFFFF";
		private const string DFA3_minS =
			"\x1\x4\x11\x9\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF"+
			"\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5"+
			"\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1"+
			"\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x3\x0\x5\xFFFF";
		private const string DFA3_maxS =
			"\x1\x20\x11\xF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5"+
			"\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1"+
			"\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF"+
			"\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x3\x0\x5\xFFFF";
		private const string DFA3_acceptS =
			"\x13\xFFFF\x1\x1\x1\x2\x65\xFFFF";
		private const string DFA3_specialS =
			"\x12\xFFFF\x1\x0\x5\xFFFF\x1\x1\x5\xFFFF\x1\x2\x5\xFFFF\x1\x3\x5\xFFFF"+
			"\x1\x4\x5\xFFFF\x1\x5\x5\xFFFF\x1\x6\x5\xFFFF\x1\x7\x5\xFFFF\x1\x8\x5"+
			"\xFFFF\x1\x9\x5\xFFFF\x1\xA\x5\xFFFF\x1\xB\x5\xFFFF\x1\xC\x5\xFFFF\x1"+
			"\xD\x5\xFFFF\x1\xE\x5\xFFFF\x1\xF\x5\xFFFF\x1\x10\x1\x11\x1\x12\x5\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x11\xC\xFFFF\x1\x9\x1\x1\x1\xE\x1\xC\x1\xA\x1\xB\x1\x5\x1\x7\x1"+
				"\x10\x1\x2\x1\x3\x1\xD\x1\x6\x1\x8\x1\x4\x1\xF",
				"\x1\x14\x2\xFFFF\x1\x12\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x18\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x1E\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x24\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x2A\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x30\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x36\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x3C\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x42\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x48\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x4E\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x54\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x5A\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x60\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x66\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x2\xFFFF\x1\x6C\x1\x14\x1\x13\x1\x14",
				"\x1\x14\x1\x74\x1\x72\x1\x73\x1\x14\x1\x13\x1\x14",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "70:1: nullable returns [TypeSyntax value] : (gn= generic_name '?' |gn= generic_name );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition3(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA3_1 = input.LA(1);
		int index3_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred3_CSharpNames_fragment))) {s = 19;}

				else if ((true)) {s = 20;}

				input.Seek(index3_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 3, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x7C\xFFFF";
		private const string DFA4_eofS =
			"\x1\xFFFF\x11\x13\x6A\xFFFF";
		private const string DFA4_minS =
			"\x1\x4\x11\x9\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF"+
			"\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5"+
			"\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1"+
			"\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x3\x0\x7\xFFFF";
		private const string DFA4_maxS =
			"\x1\x20\x11\xF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5"+
			"\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1"+
			"\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF"+
			"\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x1\x0\x5\xFFFF\x3\x0\x7\xFFFF";
		private const string DFA4_acceptS =
			"\x13\xFFFF\x1\x3\x66\xFFFF\x1\x1\x1\x2";
		private const string DFA4_specialS =
			"\x12\xFFFF\x1\x0\x5\xFFFF\x1\x1\x5\xFFFF\x1\x2\x5\xFFFF\x1\x3\x5\xFFFF"+
			"\x1\x4\x5\xFFFF\x1\x5\x5\xFFFF\x1\x6\x5\xFFFF\x1\x7\x5\xFFFF\x1\x8\x5"+
			"\xFFFF\x1\x9\x5\xFFFF\x1\xA\x5\xFFFF\x1\xB\x5\xFFFF\x1\xC\x5\xFFFF\x1"+
			"\xD\x5\xFFFF\x1\xE\x5\xFFFF\x1\xF\x5\xFFFF\x1\x10\x1\x11\x1\x12\x7\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x11\xC\xFFFF\x1\x9\x1\x1\x1\xE\x1\xC\x1\xA\x1\xB\x1\x5\x1\x7\x1"+
				"\x10\x1\x2\x1\x3\x1\xD\x1\x6\x1\x8\x1\x4\x1\xF",
				"\x1\x13\x2\xFFFF\x1\x12\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x18\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x1E\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x24\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x2A\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x30\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x36\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x3C\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x42\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x48\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x4E\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x54\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x5A\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x60\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x66\x3\x13",
				"\x1\x13\x2\xFFFF\x1\x6C\x3\x13",
				"\x1\x13\x1\x74\x1\x72\x1\x73\x3\x13",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "80:1: generic_name returns [TypeSyntax value] : (n= name '<' bga= bound_generic_arguments '>' |n= name '<' cl= comma_list '>' |n= name );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition4(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA4_1 = input.LA(1);
		int index4_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				input.Seek(index4_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred4_CSharpNames_fragment))) {s = 122;}

				else if ((EvaluatePredicate(synpred5_CSharpNames_fragment))) {s = 123;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 4, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x7A\xFFFF";
		private const string DFA5_eofS =
			"\x1\xFFFF\x11\x16\x68\xFFFF";
		private const string DFA5_minS =
			"\x1\x4\x11\x9\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF"+
			"\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3"+
			"\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3"+
			"\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x5\x0\x3\xFFFF";
		private const string DFA5_maxS =
			"\x1\x20\x11\xF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3"+
			"\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3"+
			"\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF"+
			"\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x3\x0\x3\xFFFF\x5\x0\x3\xFFFF";
		private const string DFA5_acceptS =
			"\x15\xFFFF\x1\x1\x1\x2\x63\xFFFF";
		private const string DFA5_specialS =
			"\x12\xFFFF\x1\x0\x1\x1\x1\x2\x3\xFFFF\x1\x3\x1\x4\x1\x5\x3\xFFFF\x1\x6"+
			"\x1\x7\x1\x8\x3\xFFFF\x1\x9\x1\xA\x1\xB\x3\xFFFF\x1\xC\x1\xD\x1\xE\x3"+
			"\xFFFF\x1\xF\x1\x10\x1\x11\x3\xFFFF\x1\x12\x1\x13\x1\x14\x3\xFFFF\x1"+
			"\x15\x1\x16\x1\x17\x3\xFFFF\x1\x18\x1\x19\x1\x1A\x3\xFFFF\x1\x1B\x1\x1C"+
			"\x1\x1D\x3\xFFFF\x1\x1E\x1\x1F\x1\x20\x3\xFFFF\x1\x21\x1\x22\x1\x23\x3"+
			"\xFFFF\x1\x24\x1\x25\x1\x26\x3\xFFFF\x1\x27\x1\x28\x1\x29\x3\xFFFF\x1"+
			"\x2A\x1\x2B\x1\x2C\x3\xFFFF\x1\x2D\x1\x2E\x1\x2F\x3\xFFFF\x1\x30\x1\x31"+
			"\x1\x32\x1\x33\x1\x34\x3\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x11\xC\xFFFF\x1\x9\x1\x1\x1\xE\x1\xC\x1\xA\x1\xB\x1\x5\x1\x7\x1"+
				"\x10\x1\x2\x1\x3\x1\xD\x1\x6\x1\x8\x1\x4\x1\xF",
				"\x1\x15\x2\xFFFF\x1\x12\x1\x16\x1\x13\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x18\x1\x16\x1\x19\x1\x1A",
				"\x1\x15\x2\xFFFF\x1\x1E\x1\x16\x1\x1F\x1\x20",
				"\x1\x15\x2\xFFFF\x1\x24\x1\x16\x1\x25\x1\x26",
				"\x1\x15\x2\xFFFF\x1\x2A\x1\x16\x1\x2B\x1\x2C",
				"\x1\x15\x2\xFFFF\x1\x30\x1\x16\x1\x31\x1\x32",
				"\x1\x15\x2\xFFFF\x1\x36\x1\x16\x1\x37\x1\x38",
				"\x1\x15\x2\xFFFF\x1\x3C\x1\x16\x1\x3D\x1\x3E",
				"\x1\x15\x2\xFFFF\x1\x42\x1\x16\x1\x43\x1\x44",
				"\x1\x15\x2\xFFFF\x1\x48\x1\x16\x1\x49\x1\x4A",
				"\x1\x15\x2\xFFFF\x1\x4E\x1\x16\x1\x4F\x1\x50",
				"\x1\x15\x2\xFFFF\x1\x54\x1\x16\x1\x55\x1\x56",
				"\x1\x15\x2\xFFFF\x1\x5A\x1\x16\x1\x5B\x1\x5C",
				"\x1\x15\x2\xFFFF\x1\x60\x1\x16\x1\x61\x1\x62",
				"\x1\x15\x2\xFFFF\x1\x66\x1\x16\x1\x67\x1\x68",
				"\x1\x15\x2\xFFFF\x1\x6C\x1\x16\x1\x6D\x1\x6E",
				"\x1\x15\x1\x74\x1\x72\x1\x73\x1\x16\x1\x75\x1\x76",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "107:1: bound_generic_arguments returns [TypeArgumentListSyntax value] : (an= any_name ',' bga= bound_generic_arguments |an= any_name );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition5(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA5_1 = input.LA(1);
		int index5_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_CSharpNames_fragment))) {s = 21;}

				else if ((true)) {s = 22;}

				input.Seek(index5_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 5, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _any_name_in_prog120 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_prog124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_in_any_name147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullable_in_array172 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _array_ranks_in_array176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullable_in_array188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _15_in_array_ranks211 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _comma_list_in_array_ranks215 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_array_ranks217 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _array_ranks_in_array_ranks221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _15_in_array_ranks231 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _comma_list_in_array_ranks235 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_array_ranks237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_name_in_nullable262 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_nullable264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_name_in_nullable276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_generic_name301 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _12_in_generic_name303 = new BitSet(new ulong[]{0x1FFFE0010UL});
		public static readonly BitSet _bound_generic_arguments_in_generic_name307 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_generic_name309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_generic_name321 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _12_in_generic_name323 = new BitSet(new ulong[]{0x2200UL});
		public static readonly BitSet _comma_list_in_generic_name327 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_generic_name329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_generic_name341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _any_name_in_bound_generic_arguments366 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _9_in_bound_generic_arguments368 = new BitSet(new ulong[]{0x1FFFE0010UL});
		public static readonly BitSet _bound_generic_arguments_in_bound_generic_arguments372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _any_name_in_bound_generic_arguments384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _9_in_comma_list415 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _comma_list_in_comma_list419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_in_name444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alias_qualified_in_name456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_alias_qualified481 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _11_in_alias_qualified483 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _qualified_in_alias_qualified487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualified_in_alias_qualified499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qualified524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qualified536 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _10_in_qualified538 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _qualified_in_qualified542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_predefined567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _18_in_predefined_type590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _26_in_predefined_type600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_predefined_type610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _31_in_predefined_type620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _23_in_predefined_type630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _29_in_predefined_type640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _24_in_predefined_type650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_predefined_type660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _17_in_predefined_type670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _21_in_predefined_type680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _22_in_predefined_type690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _20_in_predefined_type700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _28_in_predefined_type710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _19_in_predefined_type720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_predefined_type730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _25_in_predefined_type740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_identifier763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullable_in_synpred1_CSharpNames172 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _array_ranks_in_synpred1_CSharpNames176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _15_in_synpred2_CSharpNames211 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _comma_list_in_synpred2_CSharpNames215 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_synpred2_CSharpNames217 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _array_ranks_in_synpred2_CSharpNames221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_name_in_synpred3_CSharpNames262 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _14_in_synpred3_CSharpNames264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred4_CSharpNames301 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _12_in_synpred4_CSharpNames303 = new BitSet(new ulong[]{0x1FFFE0010UL});
		public static readonly BitSet _bound_generic_arguments_in_synpred4_CSharpNames307 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_synpred4_CSharpNames309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred5_CSharpNames321 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _12_in_synpred5_CSharpNames323 = new BitSet(new ulong[]{0x2200UL});
		public static readonly BitSet _comma_list_in_synpred5_CSharpNames327 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_synpred5_CSharpNames329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _any_name_in_synpred6_CSharpNames366 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _9_in_synpred6_CSharpNames368 = new BitSet(new ulong[]{0x1FFFE0010UL});
		public static readonly BitSet _bound_generic_arguments_in_synpred6_CSharpNames372 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  CSharpSyntax.NameParsing 
